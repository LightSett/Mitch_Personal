NAME,DESCRIPTION,TYPE,SUBTYPE,FIELD,ISEDITABLE,TRIGGERINSERT,TRIGGERDELETE,TRIGGERUPDATE,SCRIPTEXPRESSION,ERRORNUMBER,ERRORMESSAGE,EXCLUDECLIENTEVALUATION,ISENABLED,BATCH,SEVERITY,TAGS,CATEGORY,CHECKPARAMETERS
Equipment UNID,Calculate Equipment UNID,CALCULATION,,UNID,True,True,False,True,"If (($feature.ENVIRONMENT == ""Building"") && ($feature.EQUIPMENT_TYPE == ""FFDF"")){
Return ""FFDF:BLDG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Building"") && ($feature.EQUIPMENT_TYPE == ""RODAM"")){
Return ""RODAM:BLDG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Building"") && ($feature.EQUIPMENT_TYPE == ""OLT"")){
Return ""OLT:BLDG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Underground"") && ($feature.EQUIPMENT_TYPE == ""OLT"")){
Return ""OLT:UG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Building"") && ($feature.EQUIPMENT_TYPE == ""Router"")){
Return ""ROUTER:BLDG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Underground"") && ($feature.EQUIPMENT_TYPE == ""FDH"")){
Return ""FDH:UG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Aerial"") && ($feature.EQUIPMENT_TYPE == ""FDH"")){
Return ""FDH:AER::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Aerial"") && ($feature.EQUIPMENT_TYPE == ""MST"")){
Return ""MST:AER::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Underground"") && ($feature.EQUIPMENT_TYPE == ""MST"")){
Return ""MST:UG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Aerial"") && ($feature.EQUIPMENT_TYPE == ""MHT"")){
Return ""MHT:AER::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Underground"") && ($feature.EQUIPMENT_TYPE == ""MHT"")){
Return ""MHT:UG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Aerial"") && ($feature.EQUIPMENT_TYPE == ""FBT"")){
Return ""FBT:AER::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Underground"") && ($feature.EQUIPMENT_TYPE == ""FBT"")){
Return ""FBT:UG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Aerial"") && ($feature.EQUIPMENT_TYPE == ""VMST"")){
Return ""VMST:AER::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Underground"") && ($feature.EQUIPMENT_TYPE == ""VMST"")){
Return ""VMST:UG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Aerial"") && ($feature.EQUIPMENT_TYPE == ""Termination Panel"")){
Return ""TPANEL:AER::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Underground"") && ($feature.EQUIPMENT_TYPE == ""Termination Panel"")){
Return ""TPANEL:UG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Building"") && ($feature.EQUIPMENT_TYPE == ""Termination Panel"")){
Return ""TPANEL:BLDG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Building"") && ($feature.EQUIPMENT_TYPE == ""Power Supply"")){
Return ""PWRSUP:BLDG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.ENVIRONMENT == ""Underground"") && ($feature.EQUIPMENT_TYPE == ""Splitter"")){
Return ""SPLIT:UG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}",,,False,True,False,,,2147483647,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Address List,,CALCULATION,,ADD_LIST,True,True,False,True,"if (($feature.EQUIPMENT_TYPE == 'MST') || ($feature.EQUIPMENT_TYPE == 'FDH')) {
    var SAs = FeatureSetByName($datastore, 'Serving_Area', [""ADD_LIST""], true)
    
    var matchedSA = Within(Geometry($feature), SAs)

    var SA = First(matchedSA)

    return iif(IsEmpty(SA), null, SA.ADD_LIST)
}

",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Structure ID,Hand hole ID equipment is placed in,CALCULATION,,STRUCTURE_UNID,True,True,False,True,"var searchDist = 10
var sql = ""STRUCTURE_TYPE = 'Hand Hole'""

var UG_Structure = Filter(FeatureSetByName($datastore, ""UG_Structure"", [""STR_ID""], true), sql)
var nearStructure = Intersects(BufferGeodetic(Geometry($feature), searchDist, ""feet""), UG_Structure)
var matchedStructure = First(nearStructure)

return iif(IsEmpty(matchedStructure), null, matchedStructure.STR_ID)
",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Rotation Match,Match rotation of hand hole,CALCULATION,,ROTATION_SYM,True,True,False,True,"var searchDist = 10
var sql = ""STRUCTURE_TYPE = 'Hand Hole'""

var UG_Structure = Filter(FeatureSetByName($datastore, ""UG_Structure"", [""STR_ID"",""ROTATION_SYM""], true), sql)
var nearStructure = Intersects(BufferGeodetic(Geometry($feature), searchDist, ""feet""), UG_Structure)
var matchedStructure = First(nearStructure)

return iif(IsEmpty(matchedStructure), null, matchedStructure.ROTATION_SYM)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Page Number,,CALCULATION,,EQUIP_PAGE,True,True,False,True,"var Frames = FeatureSetByName($datastore,'Frames_PlanView',[""PageFinal""],true)
var intFrame = Within($feature, Frames)
var Frame = First(intFrame)

iif(IsEmpty(Frame),null,Frame.PageFinal)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Work Order ID,,CALCULATION,,WORK_ORDER_ID,True,True,False,True,"var FDA = First(Intersects($feature,FeatureSetByName($datastore,'FDA',[""WORK_ORDER_ID""],true)))
iif(IsEmpty(FDA),null,FDA.WORK_ORDER_ID)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Equipment ID,,CALCULATION,,EQUIP_ID,True,True,False,False,"Console('EQ OID: ' + $feature.OBJECTID)
var IDClasses = {'Splitter':'SP:','Future Loop':'FL:','FDH':'FDH:','OLT':'OLT:'}
var Type = iif(IsEmpty($feature.EQUIPMENT_TYPE),'Other',Text($feature.EQUIPMENT_TYPE))
if (HasKey(IDClasses,Type)) {
    var Prefix = IDClasses[Type]
    var sql = ""EQUIPMENT_TYPE = @Type""
    var FC = Filter(GetFeatureSet($feature),sql)
    var TempID = 1
    
    function Sorting(a,b) { //Sort list entries in ascending order
        if (a < b)
            return -1;
        if (a > b)
            return 1;
        return 0;
    }

    Console(Count(FC))
    var ExistID = []
    for (var f in FC) {
        if (f.EQUIP_ID != null) {
            ExistID[Count(ExistID)] = iif(Find(':',f.EQUIP_ID)>=0,Number(Split(f.EQUIP_ID,':')[1]),Number(f.EQUIP_ID))
        }
    }

    var SortExisting = Distinct(Sort(ExistID,Sorting))
    Console(SortExisting)
    Console(Count(SortExisting))
    if (!IsEmpty(ExistID)) {
        if (Includes(ExistID,Number(TempID))) {
            var Gap = 'No'
            Console(Text(TempID,'0000') + ' already in use')
            for (var i=0; i<Count(SortExisting)-1; i++) {
                Console(i)
                if ((SortExisting[i+1]-SortExisting[i]) != 1) {
                    Gap = 'Yes'
                    Console('Gap found after ID ' + SortExisting[i])
                    Console(SortExisting[i]+1)
                    TempID = SortExisting[i]+1
                    break
                }
                Console(i)
                Console(SortExisting[i])
                Console(SortExisting[i+1])
                Console('--------')
            }
            Console('Final i - ' + SortExisting[i])
            Console(Pop(SortExisting))
            if (Count(ExistID) == 1) {
                TempID = TempID + 1
            }
            else if (Gap == 'No') {
                TempID = SortExisting[i-1] + 2
            }
            Console(TempID)   
        }
    }
    var ID = Prefix + iif(Number(TempID)>999,Text(TempID,'0000'),Text(TempID,'000'))

    Console(ID)
 return ID
}",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
