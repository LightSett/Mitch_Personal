NAME,DESCRIPTION,TYPE,SUBTYPE,FIELD,ISEDITABLE,TRIGGERINSERT,TRIGGERDELETE,TRIGGERUPDATE,SCRIPTEXPRESSION,ERRORNUMBER,ERRORMESSAGE,EXCLUDECLIENTEVALUATION,ISENABLED,BATCH,SEVERITY,TAGS,CATEGORY,CHECKPARAMETERS
UG_Struture UNID,Calculate UNID of UG_Structure,CALCULATION,,UNID,True,True,False,True,"If ($feature.STRUCTURE_TYPE == ""Hand Hole""){
Return ""ACPT:HH::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if ($feature.STRUCTURE_TYPE == ""Man Hole""){
Return ""ACPT:MH::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if ($feature.STRUCTURE_TYPE == ""Pull Box""){
Return ""ACPT:PB::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if ($feature.STRUCTURE_TYPE == ""Bore Pit""){
Return ""ACPT:BP::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if ($feature.STRUCTURE_TYPE == ""Pedestal""){
Return ""ACPT:PED::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if ($feature.STRUCTURE_TYPE == ""Cabinet""){
Return ""ACPT:CAB::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if ($feature.STRUCTURE_TYPE == ""DAP""){
Return ""ACPT:DAP::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if ($feature.STRUCTURE_TYPE == ""SCB""){
Return ""ACPT:SCB::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Locator Caps,,CALCULATION,"Surface, Cap, and Bury",TRACER_CAPS,True,True,False,True,"var CON = FeatureSetByName($datastore,""Conduit"",[""INNERDUCT_COUNT""],true)

var endCON = Touches(Geometry($feature), CON)

var selCON = First(endCON)

iif(IsEmpty(selCON), null, selCON.INNERDUCT_COUNT)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Rotate to Span,,CALCULATION,,ROTATION,True,True,False,True,"function AutoRotate() {
    var toRot = [2,3,4,5,6,7,8,9,10]

    if (Includes(toRot,$feature.SUBTYPE_CODE)) {
        // Find the first intersecting line from the intersecting class
        var lineClass = FeatureSetByName($datastore, ""Landbase_EOP"", [""objectid""], true)
        var lines = Intersects(BufferGeodetic($feature, 20, ""feet""), lineClass)

        // If no feature was found, return the original value
        if (Count(lines)==0) {
            return $feature.rotation
        }

        //Take first of intersected EOP lines
        var line = First(lines)

        // Buffer the point by a small amount to extract the segment
        var search = Extent(BufferGeodetic($feature, 20, ""feet""))
        var segment = Clip(line, search)[""paths""][0]

        // Start and end points of the line
        var x1 = segment[0]['x']
        var y1 = segment[0]['y']
        var x2 = segment[-1]['x']
        var y2 = segment[-1]['y']

        // Arithmetic angle (counter-clockwise from + X axis)
        var degrees = Atan2(y2 - y1, x2 - x1) * 180 / PI;
        var val = ((degrees + 360) % 360)
    
        if ((val <= 90) || (val >=270)) {
            return val
        } else {
            return (val - 180)
        }
    }
}

AutoRotate()",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Symbology Rotation,,CALCULATION,,ROTATION_SYM,True,True,False,True,"return $feature.ROTATION + $feature.ROTATION_HELP
",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Page Number,,CALCULATION,,STR_PAGE,True,True,False,True,"var Frames = FeatureSetByName($datastore,'Frames_PlanView',[""PageFinal""],true)
var intFrame = Within($feature, Frames)
var Frame = First(intFrame)

iif(IsEmpty(Frame),null,Frame.PageFinal)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Work Order ID,,CALCULATION,,WORK_ORDER_ID,True,True,False,True,"var FDA = First(Intersects($feature,FeatureSetByName($datastore,'FDA',[""WORK_ORDER_ID""],true)))
iif(IsEmpty(FDA),null,FDA.WORK_ORDER_ID)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Structure ID,,CALCULATION,,STR_ID,True,True,False,False,"Console('HH OID: ' + $feature.OBJECTID)
var IDClasses = {'Hand Hole':'HH:', 'DAP':'DAP:', 'Bore Pit':'BP:', 'SCB':'SCB:', 'Default':'DEF:', 'Other':'UNK:'}
var STRType = iif(IsEmpty($feature.STRUCTURE_TYPE),'Other',Text($feature.STRUCTURE_TYPE))
if ($feature.SUBTYPE_CODE==1) {STRType = 'Default'}
if (HasKey(IDClasses,STRType)) {
    var Prefix = IDClasses[STRType]
    var sql = ""STRUCTURE_TYPE = @STRType""
    if ($feature.SUBTYPE_CODE==1) {sql = ""SUBTYPE_CODE = 1""}
    var FC = Filter(GetFeatureSet($feature),sql)
    var TempID = 1
    
    function Sorting(a,b) { //Sort list entries in ascending order
        if (a < b)
            return -1;
        if (a > b)
            return 1;
        return 0;
    }

    Console(Count(FC))
    var ExistID = []
    for (var f in FC) {
        if (f.STR_ID != null) {
            ExistID[Count(ExistID)] = iif(Find(':',f.STR_ID)>=0,Number(Split(f.STR_ID,':')[1]),Number(f.STR_ID))
        }
    }

    var SortExisting = Distinct(Sort(ExistID,Sorting))
    Console(SortExisting)
    Console(Count(SortExisting))
    if (!IsEmpty(ExistID)) {
        if (Includes(ExistID,Number(TempID))) {
            var Gap = 'No'
            Console(Text(TempID,'0000') + ' already in use')
            for (var i=0; i<Count(SortExisting)-1; i++) {
                Console(i)
                if ((SortExisting[i+1]-SortExisting[i]) != 1) {
                    Gap = 'Yes'
                    Console('Gap found after ID ' + SortExisting[i])
                    Console(SortExisting[i]+1)
                    TempID = SortExisting[i]+1
                    break
                }
                Console(i)
                Console(SortExisting[i])
                Console(SortExisting[i+1])
                Console('--------')
            }
            Console('Final i - ' + SortExisting[i])
            Console(Pop(SortExisting))
            if (Count(ExistID) == 1) {
                TempID = TempID + 1
            }
            else if (Gap == 'No') {
                TempID = SortExisting[i-1] + 2
            }
            Console(TempID)   
        }
    }
    var ID = Prefix + iif(Number(TempID)>999,Text(TempID,'0000'),Text(TempID,'000'))

    Console(ID)
 return ID
}",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
