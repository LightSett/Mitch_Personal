NAME,DESCRIPTION,TYPE,SUBTYPE,FIELD,ISEDITABLE,TRIGGERINSERT,TRIGGERDELETE,TRIGGERUPDATE,SCRIPTEXPRESSION,ERRORNUMBER,ERRORMESSAGE,EXCLUDECLIENTEVALUATION,ISENABLED,BATCH,SEVERITY,TAGS,CATEGORY,CHECKPARAMETERS
Span UNID,Calculate Span UNID,CALCULATION,,UNID,True,True,False,True,"If (($feature.GlobalID != Null) && ($feature.SPAN_TYPE == ""Underground"")){
Return ""SPAN:UG::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.GlobalID != Null) && ($feature.SPAN_TYPE == ""Aerial"")){
Return ""SPAN:AER::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.GlobalID != Null) && ($feature.SPAN_TYPE == ""Building"")){
Return ""SPAN:ISP::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}

",,,False,True,False,,,2147483647,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Calculated_Length,Automatic geometry calculation for length,CALCULATION,,CALCULATED_LENGTH,True,True,False,True,"//Check for geometry change upon edit and only calculate length if geometry changes
var oldGeo = geometry($originalFeature)
var newGeo = geometry($feature)
iif(Equals(newGeo, oldGeo), $feature.CALCULATED_LENGTH, LengthGeodetic($feature, 'feet'))",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Formatted Length,Format calculated length to XXX',CALCULATION,,SPAN_LEN,True,True,False,True,"//Check for geometry change upon edit and only calculate length if geometry changes
var oldGeo = geometry($originalFeature)
var newGeo = geometry($feature)
iif(Equals(newGeo, oldGeo),  Round($feature.CALCULATED_LENGTH,0) + '\'', Round(LengthGeodetic($feature, 'feet'),0) + '\'')",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
FOC List,,CALCULATION,,FOC_LIST,True,True,False,True,"Console('Span ID: ' + $feature.ObjectID)
var fields = ['*'] //Transmedia fields needed for labelling
var Transmedia = FeatureSetByName($datastore,'Transmedia',fields,true)
var Cables = Dictionary()
//Find Cables at Span line
var intCables = OrderBy(Intersects(Transmedia,$feature), 'NETWORK_TYPE ASC')
Console('# Cables found at Span: ' + Count(intCables))
For (var Cable in intCables) {
    If (Contains(Cable,$feature)) {
        Console('    Cable OID: ' + Cable.ObjectID)
        var CableData = ''
        if (Cable.TRANSMEDIA_TYPE == 'Terminal Tail') {
            CableData += 'Tail,' + Cable.TOTAL_FIBERS + ',' + Cable.CABLE_NAME + ',' + Cable.FIBER_COUNT + ',' + Cable.ADJUSTED_LENGTH
        }
        else if (Cable.TRANSMEDIA_TYPE != 'Terminal Tail') {
            CableData += Cable.NETWORK_TYPE + ',' + Cable.TOTAL_FIBERS + ',' + Cable.CABLE_NAME + ',' + Cable.FIBER_COUNT + ',' + Cable.ADJUSTED_LENGTH
        }
        Cables[Text(Cable.ObjectID)] = CableData
        Console('    -------')
    }
}
Console('    Cable List: ' + Cables)
Console('<------Next Span------->')
return Text(Cables)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
FOC Count,,CALCULATION,,FOC_COUNT,True,True,False,True,"Console('Span ID: ' + $feature.ObjectID)
var fields = ['*'] //Transmedia fields needed for labelling
var Transmedia = FeatureSetByName($datastore,'Transmedia',fields,true)
var Cables = []
var intCables = Intersects(Transmedia,$feature)
Console('# Cables found at Span: ' + Count(intCables))
var Counts = Dictionary('Total',0,'Core',0,'Distribution',0,'Tails',0,'Drop',0)
For (var Cable in intCables) {
    If (Contains(Cable,$feature)) {
        If (HasKey(Counts, Cable.NETWORK_TYPE)) {
            Console(Counts[Cable.NETWORK_TYPE])
            If (Cable.TRANSMEDIA_TYPE == 'Terminal Tail') {
                Counts['Tails'] += 1
            }
            else if (Cable.TRANSMEDIA_TYPE != 'Terminal Tail') {
                Counts[Cable.NETWORK_TYPE] += 1
            }
            Counts.Total += 1
            Console('    Cable OID: ' + Cable.ObjectID)
            Console('    ' + Counts)
            Console('    -------')
        }
    }
}
Console('\nCable Counts at Span: ' + Counts)
Console('<------------------------Next Span------------------------>\n')
return Text(Counts)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Duct List,,CALCULATION,,DUCT_LIST,True,True,False,True,"Console('Span ID: ' + $feature.ObjectID)
var fields = ['*'] //Conduit fields needed for labelling
var Conduit = FeatureSetByName($datastore,'Conduit',fields,true)
var Conduits = Dictionary()
//Find Cables at Span line
var intConduits = OrderBy(Intersects(Conduit,$feature), 'DUCT_SIZE DESC')
Console('# Conduits found at Span: ' + Count(intConduits))
For (var Conduit in intConduits) {
    If (Contains(Conduit,$feature)) {
        Console('    Conduit OID: ' + Conduit.ObjectID)
        var ConduitData = Conduit.CON_ID + ',' + Split(Conduit.DUCT_SIZE,'""')[0] + ',' + Conduit.DUCT_SCH + ',' + Split(Conduit.CON_LEN,'\'')[0] + ',' + Conduit.DUCT_CONTENT_TYPE + ',' + Replace(Replace(Conduit.DUCT_CONTENT,'\""',''),',',';')
        Conduits[Text(Conduit.ObjectID)] = ConduitData
        Console('    -------')
    }
}
Console('    Conduit List: ' + Conduits)
Console('<------Next Span------->')
return Text(Conduits)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Duct Count,,CALCULATION,,DUCT_COUNT,True,True,False,True,"Console('Span ID: ' + $feature.ObjectID)
var fields = ['*'] //Conduit fields needed for labelling
var Conduit = FeatureSetByName($datastore,'Conduit',fields,true)
var CONCount = 0
//Find Cables at Span line
var intConduits = Intersects(Conduit,$feature)
if (Count(intConduits) == 0) {return CONCount}
for (var Conduit in intConduits) {
    If (Contains(Conduit,$feature)) {
        CONCount += 1
        Console(CONCount)
    }
}
Console('# Conduits found at Span: ' + CONCount)
Console('<------Next Span------->')
return CONCount",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Span ID,,CALCULATION,,SPAN_ID,True,True,False,False,"var FC = GetFeatureSet($feature)
var TempID = 1

function Sorting(a,b) { //Sort list entries in ascending order
    if (a < b)
        return -1;
    if (a > b)
        return 1;
    return 0;
}

Console(Count(FC))
var ExistID = []
for (var f in FC) {
    if (f.SPAN_ID != null) {
        ExistID[Count(ExistID)] = Number(f.SPAN_ID)
    }
}

var SortExisting = Distinct(Sort(ExistID,Sorting))
Console(SortExisting)
Console(Count(SortExisting))
if (!IsEmpty(ExistID)) {
    if (Includes(ExistID,Number(TempID))) {
        Console('ID ' + TempID + ' already in use')
        var Gap = 'No'
        for (var i=0; i<Count(SortExisting)-1; i++) {
            Console(i)
            if ((SortExisting[i+1]-SortExisting[i]) != 1) {
                Gap = 'Yes'
                Console('Gap found after ID ' + SortExisting[i])
                Console(SortExisting[i]+1)
                TempID = SortExisting[i]+1
                break
            }
            Console(i)
            Console(SortExisting[i])
            Console(SortExisting[i+1])
            Console('--------')
        }
        Console('Final i - ' + SortExisting[i])
        Console(Pop(SortExisting))
        if (Count(ExistID) == 1) {
            TempID = TempID + 1
        }
        else if (Gap == 'No'){
            TempID = SortExisting[i-1] + 2
        }
        Console(TempID)   
    }
}
var ID = iif(Number(TempID)>999,Text(TempID,'0000'),Text(TempID,'000'))
Console(ID)

return ID",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Suggested Conduits,,CALCULATION,,DUCT_SUGGESTED,True,True,False,True,"/*
Console('Span ID: ' + $feature.ObjectID)
var fields = ['ObjectID','NETWORK_TYPE','TRANSMEDIA_TYPE','TOTAL_FIBERS','CABLE_NAME','FIBER_COUNT','ADJUSTED_LENGTH','CALCULATED_LENGTH','DROP_ACC']
var Transmedia = FeatureSetByName($datastore,'Transmedia',fields,true)
//Establish Conduit counts, tallies, conduit sizes, and content of conduits
var CONTallies = {'Core':0,'Distribution':0,'Terminal Tail':0,'Drop':0}
var CONCounts = {'Core':0,'Distribution':0,'Terminal Tail':0,'Drop':0,'Total':0}
var CableCONSizes = {'Core':'1.50','Distribution':'1.50','Terminal Tail':'1.50','Drop':'1.50'}
var FOCDia = {'288':0.79,'144':0.69,'96':0.54,'72':0.48,'48':0.41,'24':0.48,'1':0.21}
var FillRatio = 0.70
var CONNomID = 1.50
var MAXFill = Number(FillRatio*CONNomID)
var CONContents = Dictionary()
//Find Cables at Span line by class order (Core/Distribution/Tail/Drop) and sorted by length
var FOCClassOrder = ['Core','Distribution','Terminal Tail','Drop']
var sql = ''
for (var Class in FOCClassOrder) {
    var FOCType = FOCClassOrder[Class]
    if (FOCType == 'Terminal Tail') {
        sql = ""TRANSMEDIA_TYPE = 'Terminal Tail'""
        var intCables = OrderBy(Filter(Intersects(Transmedia,$feature),sql), 'CALCULATED_LENGTH DESC')
    }
    else if (FOCType == 'Drop') {
        sql = ""NETWORK_TYPE = 'Drop'""
        var intCables = OrderBy(Filter(Intersects(Transmedia,$feature),sql), 'DROP_FDH DESC')
        var DropAcc = Dictionary()
        for (var Drop in intCables) {
            if (Contains(Drop,$feature)) {
                if (!HasKey(DropAcc,Drop.DROP_ACC)) {
                    DropAcc[Text(Drop.DROP_ACC)] = []
                    Push(DropAcc[Text(Drop.DROP_ACC)],Text(Drop.ObjectID))
                }
                else {
                    Push(DropAcc[Text(Drop.DROP_ACC)],Text(Drop.ObjectID))
                }
            }
        }
        Console('Drop Cables by Access location: ' + DropAcc)
    }
    else {
        sql = ""NETWORK_TYPE = @FOCType AND TRANSMEDIA_TYPE <> 'Terminal Tail'""
        var intCables = OrderBy(Filter(Intersects(Transmedia,$feature),sql), 'CALCULATED_LENGTH DESC')
    }
    Console(FOCType + ' cables found at Span: ' + Count(intCables))
    for (var Cable in intCables) {
        var CableCt = Text(Cable.TOTAL_FIBERS)
        var CableOID = Text(Cable.ObjectID)
        if (Contains(Cable,$feature)) {
            Console('    Cable OID: ' + CableOID + ' - ' + FOCType + ' (' + Round(Cable.CALCULATED_LENGTH) + '\') ' + Cable.DROP_ACC)
            ////Begin to fill conduits
            //Do this for Core or Distribution
            if (Includes(['Core','Distribution'],FOCType)) {
                //Do some core things
                if (CONCounts[FOCType] == 0 && CONTallies[FOCType] == 0) {
                    CONCounts[FOCType] += 1
                    CONCounts['Total'] += 1
                    CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))] = Dictionary(CableCONSizes[FOCType],[])
                    Console('    ' + CONContents)
                    Console('    ' + CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))])
                    Console('    ' + Count(CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))][CableCONSizes[FOCType]]))
                }
                if ((CONTallies[FOCType] + FOCDia[CableCt]) > 1.01*MAXFill) {
                    CONCounts[FOCType] += 1
                    CONCounts['Total'] += 1
                    CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))] = Dictionary(CableCONSizes[FOCType],[])
                    CONTallies[FOCType] = FOCDia[CableCt]
                    Push(CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))][CableCONSizes[FOCType]],CableOID)
                }
                else {
                    CONTallies[FOCType] += FOCDia[CableCt]
                    Push(CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))][CableCONSizes[FOCType]],CableOID)
                }                
            }
            else if (FOCType == 'Tail') {
                //Do some tail things
                if (CONCounts[FOCType] == 0 && CONTallies[FOCType] == 0) {
                    CONCounts[FOCType] += 1
                    CONCounts['Total'] += 1
                    CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))] = Dictionary(CableCONSizes[FOCType],[])
                    Console('    ' + CONContents)
                    Console('    ' + CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))])
                    Console('    ' + Count(CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))][CableCONSizes[FOCType]]))
                }
                if ((CONTallies[FOCType] + FOCDia[CableCt]) > 1.01*MAXFill) {
                    CONCounts[FOCType] += 1
                    CONCounts['Total'] += 1
                    CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))] = Dictionary(CableCONSizes[FOCType],[])
                    CONTallies[FOCType] = FOCDia[CableCt]
                    Push(CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))][CableCONSizes[FOCType]],CableOID)
                }
                else {
                    CONTallies[FOCType] += FOCDia[CableCt]
                    Push(CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))][CableCONSizes[FOCType]],CableOID)
                }
            }
            else if (FOCType == 'Drop') {
                //Do some drop things
                if (CONCounts[FOCType] == 0 && CONTallies[FOCType] == 0) {
                    CONCounts[FOCType] += 1
                    CONCounts['Total'] += 1
                    CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))] = Dictionary(CableCONSizes[FOCType],[])
                }
                if ((CONTallies[FOCType] + FOCDia[CableCt]) > 1.01*MAXFill) {
                    CONCounts[FOCType] += 1
                    CONCounts['Total'] += 1
                    CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))] = Dictionary(CableCONSizes[FOCType],[])
                    CONTallies[FOCType] = FOCDia[CableCt]
                    Push(CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))][CableCONSizes[FOCType]],CableOID)
                }
                else {
                    CONTallies[FOCType] += FOCDia[CableCt]
                    Push(CONContents[Text(FOCType + '-' + Text(CONCounts[FOCType]))][CableCONSizes[FOCType]],CableOID)
                }
            }
            Console('    Core Tally: ' + CONTallies['Core'])
            Console('    Core Conduits: ' + CONCounts['Core'])
            Console('    Dist Tally: ' + CONTallies['Distribution'])
            Console('    Dist Conduits: ' + CONCounts['Distribution'])
            Console('    Tail Tally: ' + CONTallies['Terminal Tail'])
            Console('    Tail Conduits: ' + CONCounts['Terminal Tail'])
            Console('    Drop Tally: ' + CONTallies['Drop'])
            Console('    Drop Conduits: ' + CONCounts['Drop'])
            Console('    Total Conduits: ' + CONCounts['Total'])
            Console('    -------')
        }     
    }
}
var CONSuggested = {'1) Total':CONCounts['Total'],'2) Breakdown':CONCounts,'3) Contents':CONContents}
Console(CONSuggested)
return Text(CONSuggested)
*/",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
From Span,,CALCULATION,,From_Span,True,True,False,True,"Console($feature.ObjectID)
var Spans = FeatureSetByName($datastore,'Span',[""ObjectID"",""SPAN_ID""],true)
var fromSpans = Intersects(Geometry($feature)['paths'][0][0], Spans)
Console(Count(fromSpans))
var SpanIDs = []
for (var Span in fromSpans) {
    if (!Equals($feature.ObjectID,Span.ObjectID)) {
        Push(SpanIDs,Span.ObjectID)
    }
}
Console(SpanIDs)
return iif(IsEmpty(SpanIDs), null, SpanIDs)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
To Span,,CALCULATION,,To_Span,True,True,False,True,"Console($feature.ObjectID)
var Spans = FeatureSetByName($datastore,'Span',[""ObjectID"",""SPAN_ID""],true)
var fromSpans = Intersects(Geometry($feature)['paths'][-1][-1], Spans)
Console(Count(fromSpans))
var SpanIDs = []
for (var Span in fromSpans) {
    if (!Equals($feature.ObjectID,Span.ObjectID)) {
        Push(SpanIDs,Span.ObjectID)
    }
}
Console(SpanIDs)
return iif(IsEmpty(SpanIDs), null, SpanIDs)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
From Structure,,CALCULATION,,From_Structure,True,True,False,True,"Console($feature.ObjectID)
var Spans = FeatureSetByName($datastore,'Span',[""ObjectID"",""SPAN_ID""],true)
var STRs = FeatureSetByName($datastore,'UG_Structure',[""ObjectID"",""STR_ID""],true)
var fromSTRs = Intersects(Geometry($feature)['paths'][0][0], STRs)
Console(Count(fromSTRs))
var STRIDs = []
for (var STR in fromSTRs) {
    Push(STRIDs,STR.STR_ID)
}
Console(STRIDs)
return iif(IsEmpty(STRIDs), null, STRIDs)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
To Structure,,CALCULATION,,To_Structure,True,True,False,True,"Console($feature.ObjectID)
var Spans = FeatureSetByName($datastore,'Span',[""ObjectID"",""SPAN_ID""],true)
var STRs = FeatureSetByName($datastore,'UG_Structure',[""ObjectID"",""STR_ID""],true)
var fromSTRs = Intersects(Geometry($feature)['paths'][-1][-1], STRs)
Console(Count(fromSTRs))
var STRIDs = []
for (var STR in fromSTRs) {
    Push(STRIDs,STR.STR_ID)
}
Console(STRIDs)
return iif(IsEmpty(STRIDs), null, STRIDs)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
From Equipment,,CALCULATION,,From_Equipment,True,True,False,True,"var searchDist = 10
var sql = ""EQUIPMENT_TYPE <> 'Splitter'""
var EQ = Filter(FeatureSetByName($datastore,""Equipment"",[""EQUIP_ID""],true),sql)
var fromEQ = contains(BufferGeodetic((Geometry($feature)['paths'][0][0]), searchDist, ""feet""), EQ)
var matchedEQ = First(fromEQ)
return iif(IsEmpty(matchedEQ), null, matchedEQ.EQUIP_ID)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
To Equipment,,CALCULATION,,To_Equipment,True,True,False,True,"var searchDist = 10
var sql = ""EQUIPMENT_TYPE <> 'Splitter'""
var EQ = Filter(FeatureSetByName($datastore,""Equipment"",[""EQUIP_ID""],true),sql)
var fromEQ = contains(BufferGeodetic((Geometry($feature)['paths'][-1][-1]), searchDist, ""feet""), EQ)
var matchedEQ = First(fromEQ)
return iif(IsEmpty(matchedEQ), null, matchedEQ.EQUIP_ID)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
From Splice Closure,,CALCULATION,,From_Splice_Closure,True,True,False,True,"var searchDist = 2;
var SC = FeatureSetByName($datastore,""Splice_Closure"",[""SPLCL_ID""],true)
var fromSC = contains(BufferGeodetic((Geometry($feature)['paths'][0][0]), searchDist, ""feet""), SC)
var matchedSC = First(fromSC)
return iif(IsEmpty(matchedSC), null, matchedSC.SPLCL_ID)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
To Splice Closure,,CALCULATION,,From_Splice_Closure,True,True,False,True,"var searchDist = 2;
var SC = FeatureSetByName($datastore,""Splice_Closure"",[""SPLCL_ID""],true)
var fromSC = contains(BufferGeodetic((Geometry($feature)['paths'][-1][-1]), searchDist, ""feet""), SC)
var matchedSC = First(fromSC)
return iif(IsEmpty(matchedSC), null, matchedSC.SPLCL_ID)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Structure Count,,CALCULATION,,Structure_Count,True,True,False,True,"var STRs = Intersects($feature,FeatureSetByName($datastore,'UG_Structure',[''],true))
Console(Count(STRs))
return Count(STRs)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Work Order ID,,CALCULATION,,WORK_ORDER_ID,True,True,False,True,"var FDAs = Intersects($feature,FeatureSetByName($datastore,'FDA',[""WORK_ORDER_ID""],true))
var FDA = First(FDAs)
if (Count(FDAs) > 1) {
    FDA = First(Intersects(Geometry($feature)['paths'][-1][-1],FeatureSetByName($datastore,'FDA',[""WORK_ORDER_ID""],true)))
}
iif(IsEmpty(FDA),null,FDA.WORK_ORDER_ID)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Asbuilt FTG,,CALCULATION,,MEASURED_LENGTH,True,True,False,True,"var SpanLabels = FeaturesetByName($datastore,'Span_Labels_600',['AnnotationClassID','FeatureGlobalID','TextString'],true)

function StripTags(TextToStrip) {
  Console('\nStripping the following text of formatting tags:\n'+TextToStrip)
  //Set max iteration cap equal to number of formatting tags in text
  var MaxIterations = 0
  for (var T in TextToStrip) {
    var char = TextToStrip[T]
    if (char=='<') {MaxIterations++}
  }
  Console('\nFormatting Tags Identified: '+MaxIterations)
  var Tags = []
  var search = Mid(TextToStrip,0)
  var open = 0; var close = 0; var i = 0
  //Find index positions defining formatting tag positions in th text string
  while (Find('<',search)>=0 && i<MaxIterations) {
    Console('\n  i='+i)
    var start = iif(i==0,0,close+1)
    search = Mid(TextToStrip,start)
    var oFind = Find('<',search)+start
    var cFind = Find('>',search)+start
    open = oFind
    close = cFind
    Console('  oFind: '+oFind+' // cFind: '+cFind)
    Console('  open: '+open+' // close: '+close)
    if (open==close) {break}
    Console('  '+Mid(TextToStrip,open,close-open+1))
    Push(Tags,[open,close])
    i++
  }
  //Build a unique set of formatting tags to replace
  var TagReplacements = []
  for (var T in Tags) {
    var Tag = Tags[T]
    var open = Tag[0]; var close = Tag[1]
    var TagText = Mid(TextToStrip,open,close-open+1)
    Console('\n'+Tag+' --> '+TagText)
    if (!Includes(TagReplacements,TagText)) {Push(TagReplacements,TagText)}
  }
  //Replace all formatting tags from input text string
  for (var TR in TagReplacements) {TextToStrip = Replace(TextToStrip,TagReplacements[TR],'')}
  Console('\n'+Count(Tags)+' formatting tags stripped:\n'+TextToStrip)
  return TextToStrip
}

var FOID = $feature.OBJECTID; var FGID = $feature.GlobalID
var SLen = $feature.SPAN_LEN
Console(FOID+' // ' +FGID+' ('+SLen+')')

var Labels = Filter(SpanLabels,""FeatureGlobalID = '""+FGID+""'"")
if (Count(Labels)==0) {return}

var Footage = null
for (var L in Labels) {
  var LOID =L.ObjectID
  var LClass = DomainName(L,'AnnotationClassID')
  Console('  '+L.ObjectID+' // '+DomainName(L,'AnnotationClassID'))
  if (Find('Bubble',DomainName(L,'AnnotationClassID'))>=0) {Console('  -Skipping-'); continue}
  var excludes = ['(',')','</CLR>','<FNT style=""Bold"">','</BOL>','&apos;']
  var txt = StripTags(L.TextString)
  var txt1 = Split(txt,'\n')[0]
  if (Count(txt1)<2) {return}
  var ftg = Replace(Replace(Split(txt1,' • ')[1],')',''),'(','')
  Console('\n'+txt+'\n')
  Console('\n'+txt1+'\n')
  Console('\n'+ftg+'\n')
  Footage = Ceil(Replace(Replace(ftg,'&apos;',''),'\'',''))
  break
}

return Footage",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
