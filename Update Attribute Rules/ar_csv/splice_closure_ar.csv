NAME,DESCRIPTION,TYPE,SUBTYPE,FIELD,ISEDITABLE,TRIGGERINSERT,TRIGGERDELETE,TRIGGERUPDATE,SCRIPTEXPRESSION,ERRORNUMBER,ERRORMESSAGE,EXCLUDECLIENTEVALUATION,ISENABLED,BATCH,SEVERITY,TAGS,CATEGORY,CHECKPARAMETERS
SpliceClosure UNID,Calculate Splice Closure UNID,CALCULATION,,UNID,True,True,False,True,"If (($feature.STATUS == ""Proposed"") && ($feature.SPLICE_CLOSURE_TYPE == ""Splice Closure"")){
Return ""SPLCL:PROP::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.STATUS == ""Proposed"") && ($feature.SPLICE_CLOSURE_TYPE == ""Splice Closure w/ Splitter"")){
Return ""SPLCL:PROP::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}
else if (($feature.GlobalID != Null) && ($feature.SPLICE_CLOSURE_TYPE == ""Splice Tray"")){
Return ""SPLCL:TRAY::"" + Upper(right(split($feature.GlobalID,""-"")[0],4))
}",,,False,True,False,,,2147483647,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Placement Address,Nearest address to feature placement,CALCULATION,,PLACE_ADDRESS,True,True,False,True,"if ($feature.PLACE_ADDRESS!=null) {return $feature.PLACE_ADDRESS}
var oldGeo = geometry($originalFeature)
var newGeo = geometry($feature)
if (!Equals(newGeo,oldGeo) || $feature.PLACE_ADDRESS==null) {
 var DP = FeatureSetByName($datastore, ""Demand_Point"", [""Address""])
 var searchDistance = 500
 var DPIntersect = Intersects(DP, BufferGeodetic($feature, searchDistance, ""feet""))
 var countDP = Count(DPIntersect)

 var minDistance = 100000
 var PlaceAdd = Null
 if (countDP > 0) {
  for (var Demand in DPIntersect) {
   var Demand_geo = Point(Geometry(Demand))
   var FDH = Point(Geometry($feature))
   var dist = DistanceGeodetic(Demand_geo, FDH, ""feet"")
   if (dist < minDistance) {
    PlaceAdd = Demand.Address
    minDistance = dist
   }
  }
  return PlaceAdd
 } 
 else {
  return ""No address point found within "" + searchDistance + ""'.""
 }
}",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Page Number,,CALCULATION,,SPLCL_PAGE,True,True,False,True,"var Frames = FeatureSetByName($datastore,'Frames_PlanView',[""PageFinal""],true)
var intFrame = Within($feature, Frames)
var Frame = First(intFrame)

iif(IsEmpty(Frame),null,Frame.PageFinal)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Structure ID,,CALCULATION,,STRUCTURE_UNID,True,True,False,True,"var sql = ""STRUCTURE_TYPE IN ('Cabinet','Hand Hole','Pedestal', 'CPAD Combo', 'Pad','Pole')""
var STRs = Filter(FeatureSetByName($datastore, ""UG_Structure"", ['ObjectID',""STR_ID"",'SUBTYPE_CODE','GlobalID','Pole_GUID'], true), sql)
var IDs = []
var Ints = Intersects(Geometry($feature), STRs)
for (var I in Ints) {
    Push(IDs,Text(I.STR_ID))
}

return IDs",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Rotation Match,,CALCULATION,,ROTATION_SYM,True,True,False,True,"var searchDist = 10
var sql = ""STRUCTURE_TYPE = 'Hand Hole'""

var UG_Structure = Filter(FeatureSetByName($datastore, ""UG_Structure"", [""STR_ID"",""ROTATION_SYM""], true), sql)
var nearStructure = Intersects(BufferGeodetic(Geometry($feature), searchDist, ""feet""), UG_Structure)
var matchedStructure = First(nearStructure)

return iif(IsEmpty(matchedStructure), null, matchedStructure.ROTATION_SYM)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Address List,Pull address list from associated Serving Area,CALCULATION,Splice Tray Assembly,ADD_LIST,True,True,False,True,"var SA = FeatureSetByName($datastore, ""Serving_Area"", [""ADD_LIST""])
var matchedSA = Within($feature, SA)
var AssocSA = First(matchedSA)
    
iif(IsEmpty(AssocSA),null,AssocSA.ADD_LIST)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Work Order ID,,CALCULATION,,WORK_ORDER_ID,True,True,False,True,"var FDA = First(Intersects($feature,FeatureSetByName($datastore,'FDA',[""WORK_ORDER_ID""],true)))
iif(IsEmpty(FDA),null,FDA.WORK_ORDER_ID)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Assign GUID,,CALCULATION,,SPLCL_GUID,True,True,False,True,"var SGUID = $feature.SPLCL_GUID

return iif(SGUID==null,Upper(Guid()),SGUID)",,,True,True,False,,,2147483647,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Splice ID,,CALCULATION,,SPLCL_ID,True,True,False,False,"function Sorting(a,b) { //Sort list entries in ascending order
    if (a < b)
        return -1;
    if (a > b)
        return 1;
    return 0;
}

var SPID = $feature.SPLCL_ID
Console('EQ OID: ' + $feature.OBJECTID)
var IDClasses = {'Splice Closure':'SPLCL:','Splice Closure w/ Splitter':'SPLCL:','Splice Tray':'SPTR:','NAP':'NAP:'}
var Type = iif($feature.SPLICE_CLOSURE_TYPE==null,'Other',Text($feature.SPLICE_CLOSURE_TYPE))
if (Includes(['Other'],Type)) {return $feature.SPLCL_ID}
if (HasKey(IDClasses,Type)) {
    var Prefix = IDClasses[Type]
    var sql = ""SPLICE_CLOSURE_TYPE = @Type""
    if (Includes(['Splice Closure','Splice Closure w/ Splitter'],Type)) {sql = ""SUBTYPE_CODE IN (2,3,4,5)""}
    var FC = Filter(GetFeatureSet($feature),sql)
    var TempID = 1
   
    Console(Count(FC))
    var ExistID = []
    for (var f in FC) {
        if (f.SPLCL_ID != null) {
            ExistID[Count(ExistID)] = iif(Find(':',f.SPLCL_ID)>=0,Number(Split(f.SPLCL_ID,':')[1]),Number(f.SPLCL_ID))
        }
    }

    var SortExisting = Distinct(Sort(ExistID,Sorting))
    Console(SortExisting)
    Console(Count(SortExisting))
    if (!IsEmpty(ExistID)) {
        if (Includes(ExistID,Number(TempID))) {
            var Gap = 'No'
            Console(Text(TempID,'0000') + ' already in use')
            for (var i=0; i<Count(SortExisting)-1; i++) {
                Console(i)
                if ((SortExisting[i+1]-SortExisting[i]) != 1) {
                    Gap = 'Yes'
                    Console('Gap found after ID ' + SortExisting[i])
                    Console(SortExisting[i]+1)
                    TempID = SortExisting[i]+1
                    break
                }
                Console(i)
                Console(SortExisting[i])
                Console(SortExisting[i+1])
                Console('--------')
            }
            Console('Final i - ' + SortExisting[i])
            Console(Pop(SortExisting))
            if (Count(ExistID) == 1) {
                TempID = TempID + 1
            }
            else if (Gap == 'No') {
                TempID = SortExisting[i-1] + 2
            }
            Console(TempID)   
        }
    }
    var ID = Prefix + iif(Number(TempID)>999,Text(TempID,'0000'),Text(TempID,'000'))

    Console(ID)
  return iif(SPID==null,ID,SPID)
}",,,False,True,False,,,2147483647,"{""type"":""PropertySet"",""propertySetItems"":[]}"
