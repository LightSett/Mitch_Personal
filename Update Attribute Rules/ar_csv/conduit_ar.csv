NAME,DESCRIPTION,TYPE,SUBTYPE,FIELD,ISEDITABLE,TRIGGERINSERT,TRIGGERDELETE,TRIGGERUPDATE,SCRIPTEXPRESSION,ERRORNUMBER,ERRORMESSAGE,EXCLUDECLIENTEVALUATION,ISENABLED,BATCH,SEVERITY,TAGS,CATEGORY,CHECKPARAMETERS
Calculated_Length,,CALCULATION,,Calculated_Length,True,True,False,True,"//Check for geometry change upon edit and only calculate length if geometry changes
var oldGeo = geometry($originalFeature)
var newGeo = geometry($feature)
if (Equals(newGeo, oldGeo)) {return $feature.Calculated_Length}

var Spans = FeatureSetByName($datastore,'Span',['ObjectID'],true)
var intSpans = Contains($feature,Spans)

var Len = 0
for (var S in intSpans) {
  Len += Ceil(LengthGeodetic(S,'feet'))
}

return Len",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Formatted Length,,CALCULATION,,CON_Length,True,True,False,True,"//Check for geometry change upon edit and only calculate length if geometry changes
var oldGeo = geometry($originalFeature)
var newGeo = geometry($feature)
iif(Equals(newGeo, oldGeo),  Ceil($feature.Calculated_Length,0) + '\'', Ceil(LengthGeodetic($feature, 'feet'),0) + '\'')",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Work Order ID,,CALCULATION,,Work_Order_ID,True,True,False,True,"var FDAs = Intersects($feature,FeatureSetByName($datastore,'FDA',[""WORK_ORDER_ID""],true))
var FDA = First(FDAs)
if (Count(FDAs) > 1) {
    FDA = First(Intersects(Geometry($feature)['paths'][-1][-1],FeatureSetByName($datastore,'FDA',[""WORK_ORDER_ID""],true)))
}

iif(IsEmpty(FDA),null,FDA.WORK_ORDER_ID)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Conduit ID,,CALCULATION,,CON_ID,True,True,False,False,"var FC = GetFeatureSet($feature)
var TempID = 1
function Sorting(a,b) { //Sort list entries in descending order
    if (a < b)
        return -1;
    if (a > b)
        return 1;
    return 0;
}
Console(Count(FC))
var fList = []
var ExistID = []
for (var f in FC) {
    if (f.CON_ID != null) {
        ExistID[Count(ExistID)] = Number(Right(Split(f.CON_ID,':')[1],3))
    }
}
var SortExisting = Distinct(Sort(ExistID,Sorting))
Console(SortExisting)
Console(Count(SortExisting))
if (!IsEmpty(ExistID)) {
    if (Includes(ExistID,Number(TempID))) {
        Console(Text(TempID,'000') + ' already in use')
        for (var i=0; i<Count(SortExisting)-1; i++) {
            Console(i)
            if ((SortExisting[i+1]-SortExisting[i]) != 1) {
                Console('Gap found after ID ' + SortExisting[i])
                Console(SortExisting[i]+1)
                TempID = SortExisting[i]+1
                break
            }
            Console(i)
            Console(SortExisting[i])
            Console(SortExisting[i+1])
            Console('--------')
        }
        Console('Final i - ' + SortExisting[i])
        Console(Pop(SortExisting))
        if (Count(ExistID) == 1) {
            TempID = TempID + 1
        }
        else {
            TempID = SortExisting[i-1] + 2
        }
        Console(TempID)   
    }
}
var ID = 'CON:' + Text(TempID,'000')
Console(ID)
return ID",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
From Conduit,,CALCULATION,,From_Conduit,True,True,False,True,"Console($feature.ObjectID)
var DC = $feature.Duct_Content
var DCarray = Split(Replace(Replace(Replace(DC,'\""',''),'[',''),']',''),',')
var CONs = FeatureSetByName($datastore,'Conduit',['ObjectID','Duct_Content','GlobalID'],true)
var CONOID = null
if ($feature.Duct_Segments == NULL) {
    var sql = ""Duct_Content = @DC""
    var fromCONs = Filter(Intersects(Geometry($feature)['paths'][0][0], CONs),sql)
    Console(Count(fromCONs)-1)
    for (var CON in fromCONs) {
        if (Text($feature.ObjectID)!=Text(CON.ObjectID)) {
            CONOID = Text(CON.ObjectID)
        }
    }
}
else {
    var fromCONs = Intersects(Geometry($feature)['paths'][0][0], CONs)
    CONOID = []
    for (var CON in fromCONs) {
        if (Text($feature.ObjectID)!=Text(CON.ObjectID)) {
            var CONDCs = Split(Replace(Replace(Replace(CON.Duct_Content,'\""',''),'[',''),']',''),',')
            for (var DCon in DCarray) {
                if (Includes(CONDCs,DCarray[DCon])) {
                    if (!Includes(CONOID,Text(CON.ObjectID))) {
                        Push(CONOID,Text(CON.ObjectID))
                    }
                    Console(Text(CON.ObjectID) + ' shares transmedia. (' + DCarray[DCon] + ')')
                }
                else {Console('No shared transmedia.')}
            }
        }
    }
}
Console(CONOID)
if (!IsEmpty(fromCONs)) {
    if (TypeOf(CONOID) == 'Array') {
        return iif(Count(CONOID)==0,null,CONOID)
    }
    else {
        return CONOID
    }
}
else {
    return null
}",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
To Conduit,,CALCULATION,,To_Conduit,True,True,False,True,"Console($feature.ObjectID)
var DC = $feature.Duct_Content
var DCarray = Split(Replace(Replace(Replace(DC,'\""',''),'[',''),']',''),',')
var CONs = FeatureSetByName($datastore,'Conduit',['ObjectID','Duct_Content','GlobalID'],true)
var CONOID = null
if ($feature.Duct_Segments == NULL) {
    var sql = ""Duct_Content = @DC""
    var toCONs = Filter(Intersects(Geometry($feature)['paths'][-1][-1], CONs),sql)
    Console(Count(toCONs)-1)
    for (var CON in toCONs) {
        if (Text($feature.ObjectID)!=Text(CON.ObjectID)) {
            CONOID = Text(CON.ObjectID)
        }
    }
}
else {
    var toCONs = Intersects(Geometry($feature)['paths'][-1][-1], CONs)
    CONOID = []
    for (var CON in toCONs) {
        if (Text($feature.ObjectID)!=Text(CON.ObjectID)) {
            var CONDCs = Split(Replace(Replace(Replace(CON.Duct_Content,'\""',''),'[',''),']',''),',')
            for (var DCon in DCarray) {
                if (Includes(CONDCs,DCarray[DCon])) {
                    if (!Includes(CONOID,Text(CON.ObjectID))) {
                        Push(CONOID,Text(CON.ObjectID))
                    }
                    Console(Text(CON.ObjectID) + ' shares transmedia. (' + DCarray[DCon] + ')')
                }
                else {Console('No shared transmedia.')}
            }
        }
    }
}
Console(CONOID)
if (!IsEmpty(toCONs)) {
    if (TypeOf(CONOID) == 'Array') {
        return iif(Count(CONOID)==0,null,CONOID)
    }
    else {
        return CONOID
    }
}
else {
    return null
}",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
From Structure,,CALCULATION,,From_Structure,True,True,False,True,"var STRs = FeatureSetByName($datastore,""UG_Structure"",['ObjectID',""STR_ID"",'SUBTYPE_CODE','GlobalID','Pole_GUID'],true)
var Froms = Intersects((Geometry($feature)['paths'][0][0]), STRs)
var IDs = []
for (var F in Froms) {
    Push(IDs,Text(F.ObjectID))
}
Console(IDs)
return IDs",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
To Structure,,CALCULATION,,To_Structure,True,True,False,True,"var STRs = FeatureSetByName($datastore,""UG_Structure"",['ObjectID',""STR_ID"",'SUBTYPE_CODE','GlobalID','Pole_GUID'],true)
var Tos = Intersects((Geometry($feature)['paths'][-1][-1]), STRs)
var IDs = []
for (var T in Tos) {
    Push(IDs,Text(T.ObjectID))
}
Console(IDs)
return IDs",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Offset Side,,CALCULATION,,Offset_Side,True,True,False,False,"var Roads = FeatureSetByName($datastore,'Roads',['ObjectID'],true)
Console(Count(Roads))
//Geodesic measurement and converting to Planar measurement
var originShift = 2.0*PI*6378137.0/2.0
var ConvRatio = 180/originShift
var OffsetDist_Test = ConvRatio*50
var OffsetSide = ''
Console($feature.Calculated_Length)
//Store coordinates of line
var Geom = Geometry($feature)['paths'][0]
var Paths = []
for (var pnt in Geom) {
    var pntX = Geom[pnt]['x']
    var pntY = Geom[pnt]['y']
    Push(Paths,[pntX,pntY,0,null])
}
Console('Conduit coordinates:\n' + Paths)
//RIGHT SIDE--------------------------------------------------------------------------------------
//Find Road on right side of line
//Store reversed coordinates of right offset line
var ROffset = Offset($feature, OffsetDist_Test, 'feet', 'round')
Console(iif(IsEmpty(ROffset),'empty','not empty'))
if (IsEmpty(ROffset)) {var ROffset = Offset($feature, OffsetDist_Test, 'feet', 'square')}
Console(iif(IsEmpty(ROffset),'empty','not empty'))
if (IsEmpty(ROffset)) {return null}
var ROffGeom = ROffset['paths'][0]
var ROffPaths = []
for (var pnt in ROffGeom) {
    var pntX = ROffGeom[pnt]['x']
    var pntY = ROffGeom[pnt]['y']
    Insert(ROffPaths,0,[pntX,pntY,0,null])
}
Console('Reversed right offset coordinates:\n' + ROffPaths)
//Combine Span coordinates and reversed offset coordinated to make a right side polygon
var ROffRings = Splice(Paths,ROffPaths)
Console('Spliced ring coordinates:\n' + ROffRings)
var ROffJSON = {'rings':[ROffRings],'spatialReference':{'wkid':4326}}
var ROffPoly = Polygon(ROffJSON)
Console('Area of right side polygon: ' + AreaGeodetic(ROffPoly,'square-feet'))
Console('Right side polygon:\n' + ROffPoly)
//Find intersecting Road and total lengths to determine offset side toward road
var RRoadArea = 0
var RRoads = Intersects(Roads,ROffPoly)
Console(Count(RRoads))
for (var RRoad in RRoads) {
    Console(RRoad.ObjectID)
    var RRoadBuff = BufferGeodetic(RRoad,1,'feet')
    Console('Area of Right poly: ' + AreaGeodetic(ROffPoly,'square-feet'))
    Console('Area of Road poly: ' + AreaGeodetic(Difference(ROffPoly,RRoadBuff),'square-feet'))
    var AreaDiff = AreaGeodetic(ROffPoly,'square-feet')-AreaGeodetic(Difference(ROffPoly,RRoadBuff),'square-feet')
    Console('Area of Road in right side poly: ' + AreaDiff)
    RRoadArea += AreaDiff
}
Console('Right side Road area: ' + Round(RRoadArea) + ' sqft')
//LEFT SIDE---------------------------------------------------------------------------------------
//Find Road on left side of line
//Store reversed coordinates of left offset line
var LOffset = Offset($feature, -OffsetDist_Test, 'feet', 'round')
Console(iif(IsEmpty(LOffset),'empty','not empty'))
if (IsEmpty(LOffset)) {var LOffset = Offset($feature, OffsetDist_Test, 'feet', 'square')}
Console(iif(IsEmpty(LOffset),'empty','not empty'))
if (IsEmpty(LOffset)) {return null}
var LOffGeom = LOffset['paths'][0]
var LOffPaths = []
for (var pnt in LOffGeom) {
    var pntX = LOffGeom[pnt]['x']
    var pntY = LOffGeom[pnt]['y']
    Insert(LOffPaths,0,[pntX,pntY,0,null])
}
Console('Reversed left offset coordinates:\n' + LOffPaths)
//Combine Span coordinates and reversed offset coordinated to make a left side polygon
var LOffRings = Splice(Paths,LOffPaths)
Console('Spliced ring coordinates:\n' + LOffRings)
var LOffJSON = {'rings':[LOffRings],'spatialReference':{'wkid':4326}}
var LOffPoly = Polygon(LOffJSON)
Console('Area of left side polygon: ' + AreaGeodetic(LOffPoly,'square-feet'))
Console('Left side polygon:\n' + LOffPoly)
//Find intersecting Road and total lengths to determine offset side toward road
var LRoadArea = 0
var LRoads = Intersects(Roads,LOffPoly)
Console(Count(LRoads))
for (var LRoad in LRoads) {
    Console(LRoad.ObjectID)
    var LRoadBuff = BufferGeodetic(LRoad,1,'feet')
    Console('Area of Left poly: ' + AreaGeodetic(LOffPoly,'square-feet'))
    Console('Area of Road poly: ' + AreaGeodetic(Difference(LOffPoly,LRoadBuff),'square-feet'))
    var AreaDiff = AreaGeodetic(LOffPoly,'square-feet')-AreaGeodetic(Difference(LOffPoly,LRoadBuff),'square-feet')
    Console('Area of Road in left side poly: ' + AreaDiff)
    LRoadArea += AreaDiff
}
Console('Left side Road area: ' + Round(LRoadArea) + ' sqft')
//SET SIDE----------------------------------------------------------------------------------------
//Compare total Road areas on right and left side.  Greater total is set as offset side.
OffsetSide = iif((RRoadArea > LRoadArea),'L','R')
Console('Offset side to center: ' + OffsetSide)
return OffsetSide",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Assign GUID,,CALCULATION,,CON_GUID,True,True,False,True,"var CGUID = $feature.CON_GUID

return iif(CGUID==null,Upper(Guid()),CGUID)",,,True,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Content Details,,CALCULATION,,Duct_Content_Details,True,True,False,True,"//if (Text($feature.Duct_Content)==Text($originalfeature.Duct_Content)) {return}

function ConvArr(fieldval) {
  var Arr = iif(Find('\""',fieldval)>=0,
                Split(Replace(Replace(Replace(fieldval,'\""',''),'[',''),']',''),','),
                Split(Replace(Replace(fieldval,'[',''),']',''),','))
  Arr = iif(Text(Arr)=='[""""]',[],Arr)
  return Arr
}
var fields = ['ObjectID','Cable_ID','Cable_GUID','Total_Fibers','Network_Type','Transmedia_Type','Fiber_Count','Adjusted_Length']
var Cables = FeatureSetByName($datastore,'Transmedia',fields,true)


Console('CON ID: ' + $feature.ObjectID)
var DCs = ConvArr($feature.Duct_Content)

var Cabledetails = {}
for (var DC in DCs) {
  var C = DCs[DC]
  var sql = ""Cable_GUID = \'""+Text(C)+""\'""
  Console(sql)
  var Cable = First(Filter(Cables,sql))
  Console('  Cable OID: ' + Cable.ObjectID)
  var CableData = ''
  if (Cable.Transmedia_Type == 'Terminal Tail') {
    CableData += 'Tail,' + Cable.Total_Fibers + ',' + Cable.Cable_ID + ',' + Cable.Fiber_Count + ',' + Cable.Adjusted_Length
  }
  else if (Cable.Transmedia_Type != 'Terminal Tail') {
    CableData += Cable.Network_Type + ',' + Cable.Total_Fibers + ',' + Cable.Cable_ID + ',' + Cable.Fiber_Count + ',' + Cable.Adjusted_Length
  }
  Cabledetails[Text(Cable.Cable_GUID)] = CableData
  Console('  -------')
}

Console('Cable List: ' + Cabledetails)
return Text(Cabledetails)",,,False,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Update Offset Conduits,,CALCULATION,,Offset_Distance,True,False,False,True,"var COffs = FeatureSetByName($datastore,'Conduit_Offset',['ObjectID','Related_OID','Related_GUID'],true)

var CGUID = $feature.CON_GUID
Console(""Related_GUID = \'""+Text(CGUID)+""\'"")
var COMatch = Filter(COffs,""Related_GUID = \'""+Text(CGUID)+""\'"")
if (Count(COMatch)==0) {return}

var CONfields = ['Comments','Project_Name','Work_Order_ID','Project_Stage','Calculated_Length','CON_Length','CON_ID','CON_GUID','Duct_Content_Type','Duct_Content','Duct_Content_Details',
                 'SUBTYPE_CODE','Conduit_Type','Environment','Placement_Type','Depth','Status','Manufacturer','Duct_Size','Duct_Material','Duct_Schedule','Nominal_OD','Nominal_ID','Fill_Ratio',
                 'Tracer_Wire','Pull_Tape','Duct_Segments','From_Conduit','To_Conduit','From_Structure','To_Structure','Innerduct_Count']

var attupdates = {}
var editCt = 0
Expects($feature, ""*"")
for (var field in $feature) {
  if (!Includes(CONfields,field)) {continue}
  if (Text($feature[field])!=Text($originalfeature[field])) {attupdates[field]=$feature[field]; editCt++}
}
if (editCt==0) {return}

var COffupdates = []
for (var CO in COMatch) {
  var COMOID = CO.ObjectID
  var COffdata = {'ObjectID':COMOID,'attributes':attupdates}
  Push(COffupdates,COffdata)
}

return {
  'result':$feature.Offset_Distance,
  'edit':[
    {'className':'Conduit_Offset',
     'updates':COffupdates}
  ]
}",,,True,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
Delete Related Offset Conduits,,CALCULATION,,CON_GUID,True,False,True,False,"var CGUID = $originalfeature.CON_GUID
Console(CGUID)
var OffCs = Filter(FeatureSetByName($datastore,'Conduit_Offset',['ObjectID','Related_GUID'],true),""Related_GUID = @CGUID"")
if (Count(OffCs)==0) {return $feature.CON_GUID}
var OffCdels = []
for (var OC in OffCs) {Push(OffCdels,{'ObjectID':OC.ObjectID})}
Console(OffCdels)
return {
  'result':$feature.CON_GUID,
  'edit':[
    {'className':'Conduit_Offset',
    'deletes':OffCdels}
  ]
}",,,True,True,False,,,,"{""type"":""PropertySet"",""propertySetItems"":[]}"
